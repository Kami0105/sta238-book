[
["index.html", "STA238: Probability, Statistics, and Data Analysis Chapter 1 Introduction", " STA238: Probability, Statistics, and Data Analysis Alison Gibbs and Alex Stringer 2019-09-23 Chapter 1 Introduction Data only becomes information after it is analyzed. Analyzing data is extraordinarily difficult, but is the only way to learn meaningfully about the world. In this book, you will learn about analyzing data. You will learn how to make principled, measured statements about the data on hand (descriptive statistics); how to use the data on hand to make statements about the underlying world, and how to quantify the uncertainty in your statements (inferential statistics), and how to use the data on hand to make judgements, with uncertainty quantification, about what data you will see next (predective statistics). "],
["statistics-and-plots.html", "Chapter 2 Statistics and Plots 2.1 Introduction 2.2 Descriptive analysis 2.3 Exploratory analysis 2.4 Prescriptive analysis 2.5 Rental housing in Toronto", " Chapter 2 Statistics and Plots 2.1 Introduction How do we turn data into information? This question is highly contextual. The meaning of information will change depending on the task. And data isn’t a well-defined concept on its own. Even https://www.merriam-webster.com/dictionary/data defines data implicitly, as “a basis for…”. In this chapter we will discuss the use of data in the pursuit of three types of information: descriptive, exploratory, and prescriptive. 2.2 Descriptive analysis The most simple type of information available from a set of data is to describe what you have in front of you. The decisions you make about what to describe and how to describe it make a big difference. There is no one correct way to analyze any given dataset. You will make judgements, and assumptions, and you will have to justify and explain them. These judgements and assumptions can have a profound impact on the story you tell using your data. For example, consider a famous dataset containing information on smoking and mortality. The data is available in the R package faraway. We may load the package and data and retrieve information on it as follows: # install.packages(&quot;faraway&quot;) # Run this to install the faraway package, which has useful datasets library(faraway) # Attach the faraway package data(&quot;femsmoke&quot;) # Load the &quot;femsmoke&quot; data # ?femsmoke # Run this to open the help page for the dataset. Lines in R that begin with a pound sign (or “hashtag” for the younger, more hip reader), \\(\\#\\), are comments and are not run. Remove the \\(\\#\\) to run the code. We see from the help page, and associated reference to the paper in the American Statistician, that the data comes from asking women in Whickham, England, whether they smoke or not, and then following up in 20 years to see if they died. In describing the context surrouning the data—a quite natural step to take—we have achieved our first example of a descriptive analysis. We didn’t even use and numbers or code. Just describing what the data is counts. And it’s important, because as we learned in the introduction, information can’t exist without context. To go further in our descriptive analysis, we need some more quantitative pieces of descriptive information. What might we want to know about our data? Some ideas: How many observations are there in the data, and what does an observation represent in the context of how the data was collected? How many variables are present in the data, and what does each variable represent in the context of how the data was collected? How might we summarize each variable? We might compute a mean and a five-number summary for “continuous” variables, and a table of counts for “categorical” variables (more on this later…). Let’s see how we can obtain these descriptive measures in R: # install.packages(&quot;tidyverse&quot;) # install.packages(&quot;SMPracticals&quot;) # For datasets library(tidyverse) # We use a LOT of functions from this package. # Get the number of observations (rows), variables, and an idea # of what the data looks like: glimpse(femsmoke) ## Observations: 28 ## Variables: 4 ## $ y &lt;dbl&gt; 2, 1, 3, 5, 14, 7, 27, 12, 51, 40, 29, 101, 13, 64, 53, 6… ## $ smoker &lt;fct&gt; yes, no, yes, no, yes, no, yes, no, yes, no, yes, no, yes… ## $ dead &lt;fct&gt; yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, ye… ## $ age &lt;fct&gt; 18-24, 18-24, 25-34, 25-34, 35-44, 35-44, 45-54, 45-54, 5… # One observation represents a count of people in each category. # How many people? femsmoke %&gt;% summarize(num_people = sum(y)) # The summarize() function lets you compute summaries of variables in your dataframe ## num_people ## 1 1314 # How many smokers? femsmoke %&gt;% filter(smoker == &quot;yes&quot;) %&gt;% # filter() lets you choose which rows to keep summarize(num_smokers = sum(y)) ## num_smokers ## 1 582 # How many non-smokers? femsmoke %&gt;% filter(smoker == &quot;no&quot;) %&gt;% summarize(num_non_smokers = sum(y)) ## num_non_smokers ## 1 732 # We can get both those numbers at the same time: femsmoke %&gt;% group_by(smoker) %&gt;% # group_by() makes summarize() compute summaries within levels of a variable summarize(num_people = sum(y)) ## # A tibble: 2 x 2 ## smoker num_people ## &lt;fct&gt; &lt;dbl&gt; ## 1 yes 582 ## 2 no 732 There are lots of other descriptive statistics you could calculate. Summary: descriptive analysis involves communicating properties of a dataset, and the context behind the dataset. 2.2.1 Exercises How many non-smoking 18-24 year olds are there in the femsmoke data? Answer using filter(). How many smokers died? Answer using filter(). How many 45-55 year olds did not die? Compute the following table using group_by() and summarize(): ## # A tibble: 7 x 2 ## age num_people ## &lt;fct&gt; &lt;dbl&gt; ## 1 18-24 117 ## 2 25-34 281 ## 3 35-44 230 ## 4 45-54 208 ## 5 55-64 236 ## 6 65-74 165 ## 7 75+ 77 2.3 Exploratory analysis Descriptive analyses are an important task any time you are working with data. However, they don’t accomplish anything new; they just, well, describe what you have. An exploratory analysis involves looking for patterns or structure in the available data. We can use what we find to make decisions or come to conclusions. One thing we can choose to explore about these data is whether we observe any apparent association between smoking and mortality. To investigate any such associations, we can look at the observed mortality rates for smokers and non-smokers. This is exploratory—not descriptive—because we are going beyond simply saying what the data looks like. We are looking for a pattern, namely, “do smokers die more or less frequently than non-smokers?” Exploratory analyses involve decisions made by us, the investigator. They are naturally subjective. Different decisions can lead to uncovering different patterns. For example: # Compute the mortality rate for smokers and non-smokers. # To do this, create a dataframe containing the numbers of smokers # and non-smokers smoker_numbers &lt;- femsmoke %&gt;% # The %&gt;% operator lets you form sequences of operations group_by(smoker) %&gt;% # group_by() makes all the following operations happen within groups summarize(num_people = sum(y)) # Count the number of people who are smokers and not smokers smoker_numbers ## # A tibble: 2 x 2 ## smoker num_people ## &lt;fct&gt; &lt;dbl&gt; ## 1 yes 582 ## 2 no 732 # Now, compute the number of people who died out of the smokers and non-smokers # This looks the same as above, except we now filter() only the people who died. smoker_numbers_dead &lt;- femsmoke %&gt;% filter(dead == &quot;yes&quot;) %&gt;% # Retains rows where dead == &quot;yes&quot; only group_by(smoker) %&gt;% summarize(num_dead = sum(y)) smoker_numbers_dead ## # A tibble: 2 x 2 ## smoker num_dead ## &lt;fct&gt; &lt;dbl&gt; ## 1 yes 139 ## 2 no 230 # Now, we join these two tables together and compute the mortality rates by group. smoker_numbers %&gt;% inner_join(smoker_numbers_dead,by = &quot;smoker&quot;) %&gt;% # Joins rows with the same value of &quot;smoker&quot; mutate(mort_rate = num_dead/num_people) # mutate() creates a new variable, which can be a function of the other variables in the dataframe. ## # A tibble: 2 x 4 ## smoker num_people num_dead mort_rate ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 yes 582 139 0.239 ## 2 no 732 230 0.314 See anything interesting? What went wrong? Why are we observing that smokers have a lower mortality rate than non-smokers? This contradicts the context surrounding this analysis, which in this case is the large body of formal and anecdotal evidence suggesting that smoking is harmful to health. Did we make a mistake? One thing we definitely did was ignore some present information. Specifically, we also know how old the women were. How can we include this information in our exploratory analysis? We can compute mortality rates by age: smoker_numbers_age &lt;- femsmoke %&gt;% group_by(smoker,age) %&gt;% # Now we&#39;re grouping by smoker AND age. The rest of the code remains unchanged. summarize(num_people = sum(y)) smoker_numbers_age_dead &lt;- femsmoke %&gt;% filter(dead == &quot;yes&quot;) %&gt;% group_by(smoker,age) %&gt;% summarize(num_dead = sum(y)) smoker_numbers_age %&gt;% inner_join(smoker_numbers_age_dead,by = c(&quot;smoker&quot;,&quot;age&quot;)) %&gt;% mutate(mort_rate = num_dead/num_people) ## # A tibble: 14 x 5 ## # Groups: smoker [2] ## smoker age num_people num_dead mort_rate ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 yes 18-24 55 2 0.0364 ## 2 yes 25-34 124 3 0.0242 ## 3 yes 35-44 109 14 0.128 ## 4 yes 45-54 130 27 0.208 ## 5 yes 55-64 115 51 0.443 ## 6 yes 65-74 36 29 0.806 ## 7 yes 75+ 13 13 1 ## 8 no 18-24 62 1 0.0161 ## 9 no 25-34 157 5 0.0318 ## 10 no 35-44 121 7 0.0579 ## 11 no 45-54 78 12 0.154 ## 12 no 55-64 121 40 0.331 ## 13 no 65-74 129 101 0.783 ## 14 no 75+ 64 64 1 Older people are more likely to die within the 20 year followup period. However, examining the raw counts of people in each group, we also see that in these data, older people are less likely to smoke than younger people. So in these data, less smokers died, because less smokers were old, and more old people died. But was our first analysis wrong? No. Our first analysis was fine: we computed the mortality rate in each group. The problem was in the reporting, or the way we told the story. We didn’t provide enough information when we said “the mortality rate for smokers was lower than for non-smokers”. We should have mentioned that this is averaging over all age groups. Even when we include age in the analysis, we ought to mention the fact that there are a whole lot of variables we could have measured but didn’t, and we are implicitly averaging over these too. Before moving on, get some practice doing exploratory analysis with the following exercises: 2.3.1 Exercises What is the relative risk of mortality—the ratio of the mortality rates—for smoking 18-24 year olds vs non-smoking 18-24 year olds? Compute the answer manually by reading the numbers off the above table. Then compute it using R by doing the following: Create two datasets using filter(): one containing smokers and one containing non-smokers. filter() out only the 18-24 year olds. This gives you two datasets each with only one row. For example, smokers &lt;- femsmoke %&gt;% filter(smoker == &quot;yes&quot;,age = &quot;18-24&quot;). inner_join() the two datasets together, using age as the by variable: smokers %&gt;% inner_join(???,by = &quot;age&quot;) Advanced: modify the above steps to create the following table of relative mortality rates. You should start from a cleaned up version of the mortality rate by age table: rates_by_age &lt;- smoker_numbers_age %&gt;% inner_join(smoker_numbers_age_dead,by = c(&quot;smoker&quot;,&quot;age&quot;)) %&gt;% mutate(mort_rate = num_dead/num_people) %&gt;% ungroup() # The data was previously grouped, we don&#39;t want this anymore Use dplyr::select() to remove and rename columns, see ?dplyr::select. ## # A tibble: 7 x 4 ## age smoker_mort_rate nonsmoker_mort_rate relative_risk ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 18-24 0.0364 0.0161 2.25 ## 2 25-34 0.0242 0.0318 0.760 ## 3 35-44 0.128 0.0579 2.22 ## 4 45-54 0.208 0.154 1.35 ## 5 55-64 0.443 0.331 1.34 ## 6 65-74 0.806 0.783 1.03 ## 7 75+ 1 1 1 2.4 Prescriptive analysis Descriptive anlaysis is about understanding the data that we have. Exploratory anlaysis is about finding patterns in the data you have. Prescriptive analysis is about using the data you have to explicitly support making a decision or coming to a conclusion. Often the data has been collected for a reason. Scientific experiments, surveys, questionnaries given when applying for a mortage or insurance product; these aren’t just “fishing expeditions”. These data are collected in the hopes of coming to a specific conclusion. We might wish to state the efficacy of a clinical treatment, or decide which politician is going to win an election, or whether to grant somebody a loan or underwrite an insurance policy. Often a prescriptive analysis is conducted using exactly the same steps as an exploratory analysis. Here, you must be very careful. Knowing what you want the data to say can, and very often does, influence choices made by the researcher about how to analyze the data. This is often referred to as “researcher degrees of freedom”. For example, perhaps the smoking data was collected with the explicit purpose of supporting anti-smoking initiatives. This renders the above analysis prescriptive, because we know what we want to see: we want smokers to have a higher mortality rate than non-smokers in these data. In this context, let’s re-compute the above table of mortality rates: smoker_numbers %&gt;% inner_join(smoker_numbers_dead,by = &quot;smoker&quot;) %&gt;% mutate(mort_rate = num_dead/num_people) ## # A tibble: 2 x 4 ## smoker num_people num_dead mort_rate ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 yes 582 139 0.239 ## 2 no 732 230 0.314 …hm. It appears that the data is telling us the opposite of what we thought it would. What do we do now? Well, we ignored some information, namely the subjects’ ages. So let’s use those: smoker_numbers_age %&gt;% inner_join(smoker_numbers_age_dead,by = c(&quot;smoker&quot;,&quot;age&quot;)) %&gt;% mutate(mort_rate = num_dead/num_people) ## # A tibble: 14 x 5 ## # Groups: smoker [2] ## smoker age num_people num_dead mort_rate ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 yes 18-24 55 2 0.0364 ## 2 yes 25-34 124 3 0.0242 ## 3 yes 35-44 109 14 0.128 ## 4 yes 45-54 130 27 0.208 ## 5 yes 55-64 115 51 0.443 ## 6 yes 65-74 36 29 0.806 ## 7 yes 75+ 13 13 1 ## 8 no 18-24 62 1 0.0161 ## 9 no 25-34 157 5 0.0318 ## 10 no 35-44 121 7 0.0579 ## 11 no 45-54 78 12 0.154 ## 12 no 55-64 121 40 0.331 ## 13 no 65-74 129 101 0.783 ## 14 no 75+ 64 64 1 Oh! It’s because older people are more likely to die, and less likely to smoke. We performed the exact same steps in our prescriptive analysis as we did in our exploratory analysis. Can we make the same conclusions? This is where we need to be careful. When we go into the data with a specific question in mind, we have to report everything we see that relates to this question. We ought to report that Smokers had a lower mortality rate than non-smokers, and there were more young smokers than old smokers in the data, and younger people had a lower mortality rate than older people, in our data. Context matters! If we just reported that “controlling for age, smokers have a higher mortality rate than non-smokers”, we would be communicating a potentially spurious conclusion. What’s so important about age? We could have controlled for other variables and perhaps seen different relationships. These “researcher degrees of freedom” are a big force behind what is known as the “reproducibility crisis” in modern science. 2.4.1 Exercises For each of the following analyses, state whether you think it is descriptive, exploratory or prescriptive, and say why. I work for an urban planning think tank and I want to present to our clients a proposal that advocates the development of green spaces in urban centres as a public health initiative. I use Health Canada data on obesity and Open Data Toronto data on locations of greenspaces to investigate whether areas with more green spaces have less obesity. I am interested in which streets have more heavily enforced parking laws, so I download data on all parking tickets given in Toronto last year and make a map. 2.5 Rental housing in Toronto The RentSafeTO: Apartment Building Standards program is designed to help renters in the city of Toronto make informed choices about where to live, and to enforce a minimum standard of quality upon rental units within the city. With rents skyrocketing and home ownership not a reasonable option for most, having an informed view of the rental market is imperative for Toronto residents. It also helps keep leaders accountable, specifically if we focus on social and community housing buildings. Comprehensive and fairly clean data from the program, along with specific information, is available at https://open.toronto.ca/dataset/apartment-building-evaluation/. Data for the following were downloaded on 2019/09/16. To start your analysis, go now and download the data and open it in a spreadsheet and have a look. Familiarize yourselves with the variable descriptions and how the data were collected; the documentation. This somewhat tedious task is a first step of any data analysis, in academia, industry, government, or wherever. 2.5.1 Load the data The data are stored in a .csv file, which stands for “comma-separated-values”. Storing data in a text file with a separator, usually a comma, is very common. These are referred to as “flat files” in an industrial context, to distinguish them from data stored in databases. We may read the data into R using the read_csv function in the readr package. The readr package is part of the tidyverse package that we used before, so if you installed that package, you have it loaded. # https://open.toronto.ca/dataset/apartment-building-evaluation/ # install.packages(&quot;readr&quot;) # Read the data in. This means call the readr::read_csv() function, point it # to where you saved the data on your computer, and then save the result to a # variable. I am naming this variable &#39;apartmentdata&#39;. # Type ?readr::read_csv if you want to read about this function. apartmentdata &lt;- readr::read_csv( file = &quot;./data/apartment-data/toronto-apartment-building-evaluations.csv&quot; ) ## Parsed with column specification: ## cols( ## .default = col_double(), ## EVALUATION_COMPLETED_ON = col_character(), ## PROPERTY_TYPE = col_character(), ## RESULTS_OF_SCORE = col_character(), ## SITE_ADDRESS = col_character(), ## WARD = col_character() ## ) ## See spec(...) for full column specifications. The message displayed is telling you that readr::read_csv() guessed at what kind of data were in each column, i.e. numbers, letters, dates, etc. You should make sure, as I have while writing, that these are what you expect. You can get a concise view of this dataset using the glimpse function in the dplyr package, which is automatically loaded when you load the tidyverse: glimpse(apartmentdata) ## Observations: 3,446 ## Variables: 32 ## $ `_id` &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1… ## $ BALCONY_GUARDS &lt;dbl&gt; NA, NA, NA, NA, 5, NA, 5, 3, 4, 4, 3… ## $ CONFIRMED_STOREYS &lt;dbl&gt; 28, 4, 3, 3, 29, 3, 7, 18, 17, 32, 4… ## $ CONFIRMED_UNITS &lt;dbl&gt; 457, 15, 26, 10, 272, 12, 95, 287, 3… ## $ ELEVATORS &lt;dbl&gt; 4, NA, NA, NA, 5, NA, 5, 4, 5, 4, NA… ## $ ENTRANCE_DOORS_WINDOWS &lt;dbl&gt; 3, 3, 3, 4, 5, 4, 4, 4, 3, 4, 4, 3, … ## $ ENTRANCE_LOBBY &lt;dbl&gt; 4, 3, 3, 4, 5, 4, 4, 4, 4, 4, 4, 4, … ## $ EVALUATION_COMPLETED_ON &lt;chr&gt; &quot;04/03/2019&quot;, &quot;05/24/2018&quot;, &quot;07/11/2… ## $ EXTERIOR_CLADDING &lt;dbl&gt; 3, 4, 4, 4, 5, 4, 5, 4, 4, 3, 3, 4, … ## $ EXTERIOR_GROUNDS &lt;dbl&gt; 3, 4, 3, 3, 5, 4, 5, 4, 3, 4, 3, 4, … ## $ EXTERIOR_WALKWAYS &lt;dbl&gt; 3, 5, 4, 4, 5, 4, 5, 4, 3, 4, 4, 3, … ## $ GARBAGE_BIN_STORAGE_AREA &lt;dbl&gt; 3, 4, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, … ## $ GARBAGE_CHUTE_ROOMS &lt;dbl&gt; 3, NA, NA, NA, 5, NA, 5, 4, 3, 4, 5,… ## $ GRAFFITI &lt;dbl&gt; 5, 5, 5, 5, 5, 4, 5, 4, 3, 4, 5, 5, … ## $ INTERIOR_LIGHTING_LEVELS &lt;dbl&gt; 3, 4, 4, 4, 5, 4, 4, 3, 3, 4, 3, 4, … ## $ INTERIOR_WALL_CEILING_FLOOR &lt;dbl&gt; 4, 3, 4, 4, 5, 4, 4, 3, 4, 4, 4, 3, … ## $ INTERNAL_GUARDS_HANDRAILS &lt;dbl&gt; 3, 4, 3, 4, 5, 4, 5, 4, 4, 4, 5, 4, … ## $ NO_OF_AREAS_EVALUATED &lt;dbl&gt; 18, 14, 14, 13, 19, 16, 17, 18, 19, … ## $ OTHER_FACILITIES &lt;dbl&gt; 4, NA, NA, NA, 5, NA, NA, NA, NA, NA… ## $ PARKING_AREA &lt;dbl&gt; 2, NA, NA, NA, 4, 3, 5, 2, 4, 4, 2, … ## $ PROPERTY_TYPE &lt;chr&gt; &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;SO… ## $ RESULTS_OF_SCORE &lt;chr&gt; &quot;Evaluation needs to be conducted in… ## $ RSN &lt;dbl&gt; 4365723, 4364249, 4408585, 4288126, … ## $ SCORE &lt;dbl&gt; 71, 77, 71, 78, 98, 76, 93, 72, 74, … ## $ SECURITY &lt;dbl&gt; 4, 3, 3, 4, 5, 4, 5, 3, 4, 4, 4, 4, … ## $ SITE_ADDRESS &lt;chr&gt; &quot;2350 DUNDAS ST W&quot;, &quot;9 STAG HILL D… ## $ STAIRWELLS &lt;dbl&gt; 4, 4, 3, 4, 5, 4, 5, 4, 4, 4, 3, 4, … ## $ STORAGE_AREAS_LOCKERS &lt;dbl&gt; NA, NA, NA, NA, NA, 4, NA, NA, 3, 4,… ## $ WARD &lt;chr&gt; &quot;04&quot;, &quot;19&quot;, &quot;11&quot;, &quot;04&quot;, &quot;07&quot;, &quot;03&quot;, … ## $ WATER_PEN_EXT_BLDG_ELEMENTS &lt;dbl&gt; 4, 4, 4, 4, 5, 4, 5, 4, 5, 3, 3, 4, … ## $ YEAR_BUILT &lt;dbl&gt; 1976, 1953, 1948, 1920, 2017, 1967, … ## $ YEAR_REGISTERED &lt;dbl&gt; 2018, 2018, 2018, 2017, 2018, 2017, … That’s bigger than the smoking data! 3,446 rental apartment buildings, each with 32 factors measured. The buliding’s address and Ward number are in there, which are helpful for characterizing neighbourhoods. 2.5.2 Analysis I: what does the data look like? As a first step, we want to get an idea of what our data “looks like”. This typically means picking some interesting variables and summarizing their distributions somehow. Which variables to pick will depend on the context. Often it will be clear which variables are important, and sometimes not. Because you read the documentation and familiarized yourselves with the variables in the dataset, you know that there is a variable called SCORE which sums up the individual category scores for each building. In the context of determining building quality, this seems like an important variable to look at. We’ll summarize the distribution of SCORE using a five-number summary and mean, and a histogram with a kernel density estimate. First, prepare the data for analysis: # First, select only the columns you want # This isn&#39;t strictly necessary but trust me, it makes # debugging WAY easier. # I&#39;m also renaming the columns so the dataframe looks prettier. # Again, trust me. This stuff matters. apartmentclean &lt;- apartmentdata %&gt;% filter(!is.na(SCORE)) %&gt;% # Remove apartments with missing scores dplyr::select(ward = WARD, score = SCORE, property_type = PROPERTY_TYPE, year_built = YEAR_BUILT, address = SITE_ADDRESS ) glimpse(apartmentclean) # Much nicer! ## Observations: 3,437 ## Variables: 5 ## $ ward &lt;chr&gt; &quot;04&quot;, &quot;19&quot;, &quot;11&quot;, &quot;04&quot;, &quot;07&quot;, &quot;03&quot;, &quot;17&quot;, &quot;17&quot;, &quot;0… ## $ score &lt;dbl&gt; 71, 77, 71, 78, 98, 76, 93, 72, 74, 78, 73, 76, 57… ## $ property_type &lt;chr&gt; &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;SOCIAL HOUSING&quot;,… ## $ year_built &lt;dbl&gt; 1976, 1953, 1948, 1920, 2017, 1967, 2015, 1970, 19… ## $ address &lt;chr&gt; &quot;2350 DUNDAS ST W&quot;, &quot;9 STAG HILL DR&quot;, &quot;130 MACP… To compute the five-number summary (plus mean), use the summary() function in R. I also want to know the standard deviation of SCORE: summary(apartmentclean$score) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 37.00 68.00 72.00 72.28 77.00 99.00 sd(apartmentclean$score,na.rm = TRUE) ## [1] 7.117172 The worst building in the city has a total score of 37, and the best gets 99. The median score—half the buildings in the city have a lower score, and half a higher score than this—is 72, and this roughly equals the mean of 72.28. 25% of buildings score higher than 77, and 25% score lower than 68. So most buildings seem to fall within less than one standard deviation of the mean, which indicates that these data are fairly concentrated about their mean. To provide some context, go look up your own building (if you live in a rental building) or that of a friend in the data. Where does your building fall in terms of quality within Toronto? So far we have used tabular displays to summarize our data, for both the smoking and the apartment data. To communicate more information at once, we can use a plot. The most common type of plot for visualizing an empirical estimate of a probability distribution is a histogram. A histogram bins the data into ranges and, by default, counts the number of data points in each range. We will tell the plotting function to compute the proportion of data in each range, and then normalize the results so that the plot integrates to one (and hence estimates a probability density). This won’t change the shape of the plot. We can make a histogram in R as follows: # The ggplot2 package is loaded as part of the tidyverse score_histogram &lt;- apartmentclean %&gt;% ggplot(aes(x = score)) + # Tell ggplot to use score on the x axis theme_light() + # Make the plot pretty geom_histogram( # Makes a histogram aes(y = ..density..), bins = 20, colour = &quot;black&quot;, fill = &quot;lightgrey&quot; ) + labs(title = &quot;Distribution of RentSafeTO Apartment Building Standards score&quot;, x = &quot;Score&quot;, y = &quot;Density&quot;) + scale_x_continuous(breaks = seq(30,100,by = 5)) score_histogram It appears that most buildings are in the 65 to 85 range. (Interesting point: at time of writing I am in the process of moving from one building to another; current building has a 66, new building has an 86 :D). Another common estimate of a distribution is a kernel density estimate, which can be viewed as a more “continuous” version of a histogram that actually draws a curve on the plot that is supposed to represent the (empirical) probability density of the data. We can add this to our plot very quickly: score_histogram + geom_density() 2.5.3 Analysis II: Do different wards have different quality housing? A Ward is an administrative district within the city that has a single city counsellor. If I’m thinking about moving to, or within, Toronto, I want to know: Do different wards have different quality housing?. In order to address this question we need to decide on the following: Variable of interest. How do we quantify our research question? We need to pick a measure of quality. Picking different measures can lead to different conclusions. Filters. Do we look at all apartment buildings? Should we look only at those built after, or before, a certain date? Only those that meet a certain minimum, or maximum, standard of quality according to our definition? Are there any other kinds of decisions we might have to consider? Methods. What kind of statistical tools should we use to address our research question? We need to pick descriptive statistics to report, and decide whether we want to include other auxillary variables in the analysis. Conclusions. How do we report our results? Tables, charts, maps? Should we include subjective, editorial commentary, or let the data speak for themselves? This is already overwhelming! Let’s make an attempt at it. I propose: Our variable of interest should be SCORE, which you know (because you read the documentation…) is the “overall score of the buliding”. Higher is better. The actual formula is included in the documentation of the data. We will filter the data to only include buildings where PROPERTY_TYPE == 'PRIVATE', which will restrict our analysis to not include social housing. The quality of social housing is an important social justice issue (that you will investigate in the exercises) but it’s somewhat separate (?) from the question of where to look for rental housing. Our methods will include looking at a table of average scores for each ward. We will also look at whether older or newer buildings receive better scores. We will summarize our conclusions through a subjective assessment of the above table of average scores. With these decisions made, we may proceed with our analysis using the tidyverse as follows: # Apply filter(s). apartmentfiltered &lt;- apartmentclean %&gt;% filter(property_type == &quot;PRIVATE&quot;) # When filtering, always compare the filtered and unfiltered data to ensure # the result is as expected: glimpse(apartmentclean) ## Observations: 3,437 ## Variables: 5 ## $ ward &lt;chr&gt; &quot;04&quot;, &quot;19&quot;, &quot;11&quot;, &quot;04&quot;, &quot;07&quot;, &quot;03&quot;, &quot;17&quot;, &quot;17&quot;, &quot;0… ## $ score &lt;dbl&gt; 71, 77, 71, 78, 98, 76, 93, 72, 74, 78, 73, 76, 57… ## $ property_type &lt;chr&gt; &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;SOCIAL HOUSING&quot;,… ## $ year_built &lt;dbl&gt; 1976, 1953, 1948, 1920, 2017, 1967, 2015, 1970, 19… ## $ address &lt;chr&gt; &quot;2350 DUNDAS ST W&quot;, &quot;9 STAG HILL DR&quot;, &quot;130 MACP… glimpse(apartmentfiltered) ## Observations: 2,873 ## Variables: 5 ## $ ward &lt;chr&gt; &quot;04&quot;, &quot;19&quot;, &quot;11&quot;, &quot;07&quot;, &quot;03&quot;, &quot;17&quot;, &quot;17&quot;, &quot;08&quot;, &quot;1… ## $ score &lt;dbl&gt; 71, 77, 71, 98, 76, 93, 72, 74, 78, 73, 76, 57, 70… ## $ property_type &lt;chr&gt; &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;PRIVATE&quot;, &quot;PRIVA… ## $ year_built &lt;dbl&gt; 1976, 1953, 1948, 2017, 1967, 2015, 1970, 1976, 19… ## $ address &lt;chr&gt; &quot;2350 DUNDAS ST W&quot;, &quot;9 STAG HILL DR&quot;, &quot;130 MACP… nrow(apartmentclean) - nrow(apartmentfiltered) # Dropped 567 rows. ## [1] 564 # Now create the table of averages: apartmentfiltered %&gt;% group_by(ward) %&gt;% summarize(avg_score = mean(score)) ## # A tibble: 26 x 2 ## ward avg_score ## &lt;chr&gt; &lt;dbl&gt; ## 1 01 71.5 ## 2 02 73.0 ## 3 03 70.5 ## 4 04 68.2 ## 5 05 71.7 ## 6 06 72.1 ## 7 07 69.8 ## 8 08 73.5 ## 9 09 67.5 ## 10 10 72.2 ## # … with 16 more rows Bah! What happened? Why are there these NA values? NA is the value R uses to mean “missing”. We have to hope that whether a rental apartment building’s score is missing is not related to what that score is, that is, we hope apartments with higher or lower scores aren’t missing more often. We will ignore missingness for now. To do this, use the na.rm = TRUE option in mean: apartmentsummary &lt;- apartmentfiltered %&gt;% group_by(ward) %&gt;% summarize(avg_score = mean(score,na.rm = TRUE)) apartmentsummary ## # A tibble: 26 x 2 ## ward avg_score ## &lt;chr&gt; &lt;dbl&gt; ## 1 01 71.5 ## 2 02 73.0 ## 3 03 70.5 ## 4 04 68.2 ## 5 05 71.7 ## 6 06 72.1 ## 7 07 69.8 ## 8 08 73.5 ## 9 09 67.5 ## 10 10 72.2 ## # … with 16 more rows This isn’t a super friendly way of comparing these 26 numbers. We need some kind od visualization, or plot, so we can take one look and get an idea of what is going on. In order to pick what kind of plot to make, we have to understand what types of variables we are attempting to compare. Broadly speaking, variables can either be continuous or categorical. A continuous variable consists of numbers. You can always compare the order of two values of a continuous variable (say whether one is bigger than the other), because its values are just numbers. A categorical variable takes values from a finite (discrete) set. These values can be anything. Categorical variables sometimes have values which can be compared, like “big”, “medium”, “small”; but often the values are not inherently comparable. In the case of the table of average scores by ward, we will consider avg_score to be a continuous variable and ward to be a categorical variable. Wards are labelled with numbers, yes, but they are not inherently comparable; they are areas within the city. It wouldn’t make sense to say that ward 2 were “less” than ward 17. We could have labelled them “A”, “B”, “C”,… and the meaning would have been the same. One common visualization used to compare values of a continuous variable with values of a categorical variable is a dot chart. A dot chart contains the values of the categorical variable on the x-axis and the values of the continuous variable on the y-axis. You can take one look and see whether there is any pattern in values of the continuous variable with respect to the categorical variable. We create a dot chart to visualize these summary statistics using the ggplot2 package. This is also included with the tidyverse (surprise!): apartmentsummary %&gt;% ggplot(aes(x = ward,y = avg_score)) + # Set up the variable mappings theme_light() + # Make it pretty geom_point(pch = 21,colour = &quot;black&quot;,fill = &quot;grey&quot;) + # Add the bars labs(title = &quot;Average ABS score shows moderate variability across wards in Toronto&quot;, x = &quot;Ward&quot;, y = &quot;Average ABS Score&quot;) # Informative title It looks like some wards are better than others. Or are they? Can we make any definitive conclusions based on this? 2.5.4 Analysis III: trends in quality over time Let’s go further and analyze some other interesting aspects of these data. I’m interested in knowing: Are newer buildings higher quality? We have the score and the year_built, and we’d like to investigate whether newer buildings (higher year_built) have higher scores. We have another decision to make. We could consider year_built to be a categorical variable, and make a bar chart. Or, we could consider it to be a continuous variable. Because values of year_built are inherently comparable, and because our research question involves making such comparisons, we will consider year_built to be a continuous variable. One type of plot used to compare continuous variables is a scatterplot. A scatterplot has continuous variables on the x- and y-axes, and draws a point (or bubble) at each place in the two-dimensional plane where a datapoint occurs. We can make this kind of plot in ggplot2 as well. This time, we use the raw (well, cleaned and filtered) data: apartmentfiltered %&gt;% filter(year_built &gt; 1900) %&gt;% ggplot(aes(x = year_built,y = score)) + theme_light() + geom_point(pch = 21,colour = &quot;black&quot;,fill = &quot;grey&quot;) + # pch=21 makes the bubbles hollow, looks nice scale_x_continuous(breaks = seq(1900,2020,by=10)) + # Set the x-axis range labs(title = &quot;Less rental buildings are being built recently, but they are of higher quality&quot;, x = &quot;Year Built&quot;, y = &quot;ABS Score&quot;) Very interesting. You can clearly see the baby boom of the 1950’s to 1970’s, followed by a massive slowdown in construction during the economic slump in the 1980’s, and a complete stop when rent control was introduced in 1991 (remember, these are rental buildings only). Then, we see a new wave of rental building construction, and the new buildings seem to be of higher quality. What are the highest and lowest quality rental buildings in Toronto? # Get the 10 highest scoring buildings apartmentfiltered %&gt;% arrange(desc(score)) %&gt;% # Sort the data, descending, by score slice(1:10) # Take the first ten- i.e. the top ten ## # A tibble: 10 x 5 ## ward score property_type year_built address ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 YY 99 PRIVATE 2018 561 SHERBOURNE ST ## 2 17 99 PRIVATE 2017 123 PARKWAY FOREST DR ## 3 16 99 PRIVATE 1963 70 PARKWOODS VILLAGE DR ## 4 07 98 PRIVATE 2017 2 VENA WAY ## 5 17 97 PRIVATE 1968 24 FOREST MANOR RD ## 6 12 96 PRIVATE 1960 42 GLEN ELM AVE ## 7 13 95 PRIVATE 2017 252 VICTORIA ST ## 8 02 95 PRIVATE 1969 500 SCARLETT RD ## 9 16 95 PRIVATE 1962 67 PARKWOODS VILLAGE DR ## 10 07 95 PRIVATE 2016 6 VENA WAY Wow. I know where I want to live. 2.5.5 Summary We have seen how even something simple like trying to figure out whether different areas of the city have different quality housing can require a lot of decision making. And these decisions require expertise. By taking a principled approach to learning data analysis, you are empowering yourself to live a life that is better informed. But notice that we didn’t really answer any questions in this chapter. We saw some rough patterns, but were they real? If we made different decisions, or if we sampled different data, would we have seen different patterns? In order to understand what the problem is and how to approach it, we need to take a more detailed look at the concept of error. This is the subject of Chapter 2. 2.5.6 Exercises Take each of the analyses we have performed on the Toronto rental data and say whether you think it’s descriptive, exploratory, or prescriptive, or a mix, and say why. What is that “YY” ward that shows up in the dot plot? Investigate this unusual observation. Read the documentation online and choose three variables that you find the most interesting. Reproduce the analyses I, II and III using your variables. Is there more or less variability across wards than with score? What is the ward with the highest average score? In what ward is/are the building(s) with the highest score(s)? Is this the same ward, or not? Would you expect the ward with the highest average to also have the highest-scoring buildings? Repeat this question with the lowest scoring buildings instead of the highest. If you live in a rental apartment, find it in these data. If not, find a friend’s place. How does your building compare to other buildings in your ward? Does it score higher or lower? The filter() function is your friend here, or you can use apartmentfiltered %&gt;% arrange(SITE_ADDRESS) %&gt;% print(n = Inf) and then find yours in the list manually. Combine the analyses of sections 2.3.2 and 2.3.3. with that of 2.3.4. Specifically, make a table and a boxplot of the average score by year. This means replace ward by year_built in the analysis of sections 2.3.2. and 2.3.3. Do your conclusions change when comparing with 2.3.4? Why or why not? Would you expect this to always be the case? Advanced: analyze the quality of social housing in Toronto. Perform a similar analysis to what we performed here for PROPERTY_TYPE == 'PRIVATE', but instead for PROPERTY_TYPE %in% c('SOCIAL HOUSING','TCHC') (equivalent to PROPERTY_TYPE != 'PRIVATE'). Does the quality of social housing in Toronto vary greatly across different wards? Is it improving or degrading over time? Do you think we have enough information here to definitively answer these questions? "],
["error.html", "Chapter 3 Error 3.1 Introduction 3.2 Which wards have the highest/lowest quality rental housing?", " Chapter 3 Error 3.1 Introduction In this chapter we will more formally discuss the notion of error. We will learn how to identify potential sources of error in an analysis, and for certain types of error, how to quantify them. There are many different potential sources of error when analyzing data. A very limited list of examples: Human error. You may make a mistake somewhere in your code. You could join tables incorrectly, exclude/include data you didn’t mean to, compute a summary or fit a model incorrectly. Statistical error. The data you have is subject to uncertainty and variability. In a survey or scientific experiment, your data may be subject to sampling variability, which is the notion that if you repeated your data collection again under identical circumstances, you’d get different data. In cases where such hypothetical repeated sampling doesn’t make sense—for example when studying phenomena like air pollution or temperature, which occur once at each given place and time—your data is still not perfectly measured and you may be uncertain that it is fully capturing the underlying truth. Communication error. You might have perfect data and a perfect analysis, and then communicate the results incorrectly. Or, your analysis and data might not be answering the question you intended. In this chapter we will primarily focus on statistical error, because this is the type of error that, in statistical sciences, we are usually able to quantify. 3.2 Which wards have the highest/lowest quality rental housing? library(tmap) # For maps! # Read in the pre-cleaned apartment data with postal codes apartmentpostal &lt;- readRDS(&quot;./data/apartment-data/apartment-postal-merged.rds&quot;) # Render it as an appropriate spatial datatype apartmentpoints &lt;- SpatialPointsDataFrame( coords = apartmentpostal[ ,c(&quot;lon&quot;,&quot;lat&quot;)], data = apartmentpostal, proj4string = CRS(proj4string(torontoct)) ) library(tmap) # Better map plotting software. # Load the shape file. # This is a spatial data format that tells us where to draw polygons # You don&#39;t have to know about it for this course (won&#39;t be tested). canadashape &lt;- rgdal::readOGR( # FSA- 3 digit postal code &quot;/Users/alexstringer/teaching/w20/STA238/materials/book/data/shape-files/canada-fsa/gfsa000a11a_e.shp&quot; ) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/Users/alexstringer/teaching/w20/STA238/materials/book/data/shape-files/canada-fsa/gfsa000a11a_e.shp&quot;, layer: &quot;gfsa000a11a_e&quot; ## with 1621 features ## It has 3 fields canadact &lt;- rgdal::readOGR( # Census tracts &quot;/Users/alexstringer/teaching/w20/STA238/materials/book/data/shape-files/canada-ct/gct_000b11a_e.shp&quot; ) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/Users/alexstringer/teaching/w20/STA238/materials/book/data/shape-files/canada-ct/gct_000b11a_e.shp&quot;, layer: &quot;gct_000b11a_e&quot; ## with 5452 features ## It has 8 fields canadada &lt;- rgdal::readOGR( # Dissemination areas &quot;/Users/alexstringer/teaching/w20/STA238/materials/book/data/shape-files/canada-da/gda_000b11a_e.shp&quot; ) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/Users/alexstringer/teaching/w20/STA238/materials/book/data/shape-files/canada-da/gda_000b11a_e.shp&quot;, layer: &quot;gda_000b11a_e&quot; ## with 56204 features ## It has 21 fields # Filter out only toronto postals. # Can&#39;t use the filter() function on a spatial dataframe. # Subset manually. Use a &#39;regular expression&#39;, common knowledge among CS folks # but maybe not so much among statisticians? # Toronto postals start with &quot;M&quot;. &quot;^[A-Z]&quot; is a regular expression which # matches any string that starts with &quot;M&quot;. torontoshape &lt;- subset(canadashape, stringr::str_extract(canadashape@data$CFSAUID,&quot;^[A-Z]&quot;) == &quot;M&quot;) torontoct &lt;- subset(canadact, stringr::str_detect(canadact@data$CMANAME,&quot;Toronto&quot;)) torontoda &lt;- subset(canadada, stringr::str_detect(canadada@data$CDNAME,&quot;Toronto&quot;)) # Summarize the apartment scores by FSA (first 3 digits of postal). # Another clever (?) use of regular expressions. apartmentsummaryfsa &lt;- apartmentpostal %&gt;% mutate(fsa = stringr::str_extract(postal,&quot;M[0-9][A-Z]&quot;)) %&gt;% # Extracts the first three digits of the postal of the form MNX where N is a number and X is any letter. group_by(fsa) %&gt;% summarize(score = mean(score),numapartments = n()) glimpse(apartmentsummaryfsa) ## Observations: 95 ## Variables: 3 ## $ fsa &lt;chr&gt; NA, &quot;M1B&quot;, &quot;M1C&quot;, &quot;M1E&quot;, &quot;M1G&quot;, &quot;M1H&quot;, &quot;M1J&quot;, &quot;M1K… ## $ score &lt;dbl&gt; 72.50000, 74.29167, 74.00000, 70.71875, 70.64286, … ## $ numapartments &lt;int&gt; 12, 24, 1, 32, 28, 15, 37, 78, 44, 17, 53, 36, 43,… # How big are the FSA&#39;s? apartmentsummaryfsa %&gt;% ggplot(aes(x = numapartments)) + theme_light() + geom_histogram(bins = 20,colour = &quot;black&quot;,fill = &quot;lightgrey&quot;) + labs(title = &quot;Number of rental buildings in each FSA&quot;, x = &quot;Number of buildings&quot;, y = &quot;Number of FSAs with that many buildings&quot;) # What does the distribution of average score in an FSA look like? apartmentsummaryfsa %&gt;% ggplot(aes(x = score)) + theme_light() + geom_histogram(bins = 20,colour = &quot;black&quot;,fill = &quot;lightgrey&quot;) + labs(title = &quot;Average score in each FSA&quot;, x = &quot;Average score&quot;, y = &quot;Number of FSAs with that average score&quot;) # Map of toronto coloured by average score # Merge the shape data with the apartment data toronto_apartments_avgscore &lt;- sp::merge( torontoshape, apartmentsummaryfsa, by.x = &quot;CFSAUID&quot;, by.y = &quot;fsa&quot; ) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(toronto_apartments_avgscore) + tm_fill(&quot;score&quot;) + tm_shape(apartmentpoints) + tm_dots() library(sp) # Summary by Census Tract # Find out which CT each apartment building is in torontoapartmentsct &lt;- sp::over(apartmentpoints,torontoct) # Add it back on to the apartments data apartmentpostal_withct &lt;- apartmentpostal apartmentpostal_withct$ct &lt;- torontoapartmentsct$CTUID apartmentsummaryct &lt;- apartmentpostal_withct %&gt;% group_by(ct) %&gt;% summarize(score = mean(score),numapartments = n()) # How big are the Census Tracts? apartmentsummaryct %&gt;% ggplot(aes(x = numapartments)) + theme_light() + geom_histogram(bins = 20,colour = &quot;black&quot;,fill = &quot;lightgrey&quot;) + labs(title = &quot;Number of rental buildings in each CT&quot;, x = &quot;Number of buildings&quot;, y = &quot;Number of CTs with that many buildings&quot;) # What does the distribution of average score in an FSA look like? apartmentsummaryct %&gt;% ggplot(aes(x = score)) + theme_light() + geom_histogram(bins = 20,colour = &quot;black&quot;,fill = &quot;lightgrey&quot;) + labs(title = &quot;Average score in each CT&quot;, x = &quot;Average score&quot;, y = &quot;Number of CTs with that average score&quot;) toronto_apartments_avgscore_ct &lt;- sp::merge( torontoct, apartmentsummaryct, by.x = &quot;CTUID&quot;, by.y = &quot;ct&quot; ) toronto_apartments_avgscore_ct@bbox &lt;- toronto_apartments_avgscore@bbox tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(toronto_apartments_avgscore_ct) + tm_fill(&quot;score&quot;) + tm_shape(apartmentpoints) + tm_dots() The reason the map has grey is because I filtered based on the Toronto “Census Metropolitan Area” (CMA), which includes the suburbs (a bunch of “L” postal codes). When you replicate this for the Dissemination Areas, you won’t have this grey, because they use the Toronto “Census Division”, which is what we commonly think of as being “Toronto”. Census data is confusing! Exercise: reproduce the following analysis. ## tmap mode set to plotting "],
["mathematical-models.html", "Chapter 4 Mathematical Models", " Chapter 4 Mathematical Models In this chapter we will introduce a mathematical framework for quantifying uncertainty. "],
["computational-models.html", "Chapter 5 Computational Models", " Chapter 5 Computational Models In this section we will introduce a computational framework for quantifying uncertainty. "],
["incorporating-what-i-know-using-prior-information-to-inform-inferences.html", "Chapter 6 Incorporating what I know: using prior information to inform inferences", " Chapter 6 Incorporating what I know: using prior information to inform inferences In this chapter we will discuss formally incorporating information that is known beforehand into our inferences. "]
]
